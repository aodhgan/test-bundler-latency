import { formatUnknown } from './formatUnknown.js';
import { getOptionsWith } from './getOptionsWith.js';
export function formatArrayEntries(value, sibling, options, valueStack, siblingStack) {
    const entries = [];
    const passedOptions = getOptionsWith(options, {
        requireStrictEquality: false,
        maxLineLength: options.maxLineLength - 10,
    });
    let empty = 0;
    for (let i = 0; i < value.length; i++) {
        if (!Object.prototype.hasOwnProperty.call(value, i.toString())) {
            empty++;
        }
        else {
            if (empty !== 0) {
                entries.push(formatEmpty(empty));
                empty = 0;
            }
            const nestedOptions = getOptionsWith(passedOptions, {
                skipMatcherReplacement: passedOptions.skipMatcherReplacement ||
                    (!!sibling &&
                        !Object.prototype.hasOwnProperty.call(sibling, i.toString())),
            });
            const valueFormat = formatUnknown(value[i], sibling === null || sibling === void 0 ? void 0 : sibling[i], nestedOptions, valueStack, siblingStack);
            for (const line of valueFormat) {
                line[0] += 1;
            }
            entries.push(...valueFormat);
        }
    }
    if (empty !== 0) {
        entries.push(formatEmpty(empty));
    }
    return entries;
}
function formatEmpty(empty) {
    if (empty === 1) {
        return [1, '<empty>'];
    }
    else {
        return [1, `<${empty} empty items>`];
    }
}
//# sourceMappingURL=formatArrayEntries.js.map
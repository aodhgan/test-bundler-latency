"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toMatchSnapshot = void 0;
const fs_1 = require("fs");
const expect_js_1 = require("../../expect.js");
const index_js_1 = require("../../format/index.js");
const format_js_1 = require("./format.js");
const getSnapshot_js_1 = require("./getSnapshot.js");
const getSnapshotUpdateMode_js_1 = require("./getSnapshotUpdateMode.js");
(0, expect_js_1.registerValidator)('toMatchSnapshot', toMatchSnapshot);
function toMatchSnapshot(control, context) {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    if (context === undefined) {
        throw new TypeError('Invalid or no test context provided to .toMatchSnapshot(context).');
    }
    if (control.isNegated) {
        throw new TypeError("toMatchSnapshot cannot be used with 'not'.");
    }
    const actual = (0, index_js_1.format)(control.actual, null);
    const mode = (0, getSnapshotUpdateMode_js_1.getSnapshotUpdateMode)();
    const snapshot = (0, getSnapshot_js_1.getSnapshot)(control.file, context, mode);
    if (mode === 'all' || (mode === 'new' && snapshot.expected === undefined)) {
        snapshot.content[snapshot.name] = actual;
        (0, fs_1.writeFileSync)(snapshot.file, (0, format_js_1.formatSnapshot)(snapshot.content), 'utf8');
    }
    else if (snapshot.expected === undefined) {
        control.assert({
            success: false,
            reason: `No snapshot was found. Snapshots cannot be generated on CI.`,
            negatedReason: '',
            actual,
            expected: undefined,
        });
    }
    else {
        control.assert({
            success: actual === snapshot.expected,
            reason: `${(0, index_js_1.formatCompact)(control.actual)} is not equal to snapshot. Run with UPDATE_SNAPSHOTS=true to update snapshots.`,
            negatedReason: '',
            actual,
            expected: snapshot.expected,
        });
    }
}
exports.toMatchSnapshot = toMatchSnapshot;
//# sourceMappingURL=toMatchSnapshot.js.map
import { registerValidator } from '../../expect.js';
import { formatCompact } from '../../format/index.js';
import { isEqual } from '../../isEqual/index.js';
import { assertIsMock } from './utils.js';
registerValidator('toHaveBeenCalledWith', toHaveBeenCalledWith);
export function toHaveBeenCalledWith(control, ...expected) {
    assertIsMock(control);
    if (control.actual.calls.length === 0) {
        return control.assert({
            success: false,
            reason: `The mock function was never called, but it was expected to have been called at least once.`,
            negatedReason: '',
        });
    }
    const matchingArgs = control.actual.calls.find((call) => isEqual(call.args, expected));
    const matchingInline = formatCompact(matchingArgs === null || matchingArgs === void 0 ? void 0 : matchingArgs.args);
    const expectedInline = formatCompact(expected);
    control.assert({
        success: matchingArgs !== undefined,
        reason: `The mock function was never called with ${expectedInline}, but was expected to have been.`,
        negatedReason: `The passed arguments ${matchingInline} are equal to ${expectedInline}, but were expected not to be equal.`,
    });
}
//# sourceMappingURL=toHaveBeenCalledWith.js.map
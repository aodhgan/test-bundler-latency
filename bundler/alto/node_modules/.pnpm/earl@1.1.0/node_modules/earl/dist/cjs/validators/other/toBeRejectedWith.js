"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBeRejectedWith = void 0;
const expect_js_1 = require("../../expect.js");
const index_js_1 = require("../../format/index.js");
const errors_js_1 = require("./errors.js");
(0, expect_js_1.registerValidator)('toBeRejected', (control) => toBeRejectedWith(control));
(0, expect_js_1.registerValidator)('toBeRejectedWith', toBeRejectedWith);
async function toBeRejectedWith(control, errorClassOrMessage, message) {
    if (typeof control.actual === 'function') {
        return handleAsyncFunction(control, control.actual, errorClassOrMessage, message);
    }
    if (control.actual instanceof Promise) {
        return handlePromise(control, control.actual, errorClassOrMessage, message);
    }
    const actualInline = (0, index_js_1.formatCompact)(control.actual);
    return control.fail({
        reason: `The value ${actualInline} is neither a function nor a promise, but it was expected to be a function or a promise.`,
    });
}
exports.toBeRejectedWith = toBeRejectedWith;
async function handleAsyncFunction(control, 
// eslint-disable-next-line @typescript-eslint/ban-types
fn, errorClassOrMessage, message) {
    const { didThrow, error } = await (0, errors_js_1.captureAsyncError)(() => fn());
    if (!didThrow) {
        return control.assert({
            success: false,
            reason: 'The async function call did not throw an error, but it was expected to.',
            negatedReason: '',
        });
    }
    (0, errors_js_1.processError)(control, error, 'The async function call threw', errorClassOrMessage, message);
}
async function handlePromise(control, promise, errorClassOrMessage, message) {
    const { didThrow, error } = await (0, errors_js_1.captureAsyncError)(() => promise);
    if (!didThrow) {
        return control.assert({
            success: false,
            reason: 'The promise was not rejected, but it was expected to be rejected.',
            negatedReason: '',
        });
    }
    (0, errors_js_1.processError)(control, error, 'The promise was rejected with', errorClassOrMessage, message);
}
//# sourceMappingURL=toBeRejectedWith.js.map
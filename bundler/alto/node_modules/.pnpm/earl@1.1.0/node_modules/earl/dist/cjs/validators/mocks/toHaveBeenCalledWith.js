"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toHaveBeenCalledWith = void 0;
const expect_js_1 = require("../../expect.js");
const index_js_1 = require("../../format/index.js");
const index_js_2 = require("../../isEqual/index.js");
const utils_js_1 = require("./utils.js");
(0, expect_js_1.registerValidator)('toHaveBeenCalledWith', toHaveBeenCalledWith);
function toHaveBeenCalledWith(control, ...expected) {
    (0, utils_js_1.assertIsMock)(control);
    if (control.actual.calls.length === 0) {
        return control.assert({
            success: false,
            reason: `The mock function was never called, but it was expected to have been called at least once.`,
            negatedReason: '',
        });
    }
    const matchingArgs = control.actual.calls.find((call) => (0, index_js_2.isEqual)(call.args, expected));
    const matchingInline = (0, index_js_1.formatCompact)(matchingArgs === null || matchingArgs === void 0 ? void 0 : matchingArgs.args);
    const expectedInline = (0, index_js_1.formatCompact)(expected);
    control.assert({
        success: matchingArgs !== undefined,
        reason: `The mock function was never called with ${expectedInline}, but was expected to have been.`,
        negatedReason: `The passed arguments ${matchingInline} are equal to ${expectedInline}, but were expected not to be equal.`,
    });
}
exports.toHaveBeenCalledWith = toHaveBeenCalledWith;
//# sourceMappingURL=toHaveBeenCalledWith.js.map
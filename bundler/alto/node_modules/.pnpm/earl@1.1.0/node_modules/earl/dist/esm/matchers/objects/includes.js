import { registerMatcher } from '../../expect.js';
import { isEqual } from '../../isEqual/index.js';
registerMatcher('includes', includes);
export function includes(...items) {
    return (value) => {
        if (typeof value === 'string') {
            if (items.some((item) => typeof item !== 'string')) {
                return false;
            }
            return items.every((item) => value.includes(item));
        }
        if (!isIterable(value)) {
            return false;
        }
        return contains(Array.from(value), items);
    };
}
function isIterable(value) {
    return Symbol.iterator in Object(value);
}
function contains(array, items) {
    const matchedIndexes = {};
    return items.every((expectedItem) => {
        const foundIndex = array.findIndex((actualItem, index) => isEqual(actualItem, expectedItem) && !matchedIndexes[index]);
        if (foundIndex !== -1) {
            matchedIndexes[foundIndex] = true;
            return true;
        }
        else {
            return false;
        }
    });
}
//# sourceMappingURL=includes.js.map
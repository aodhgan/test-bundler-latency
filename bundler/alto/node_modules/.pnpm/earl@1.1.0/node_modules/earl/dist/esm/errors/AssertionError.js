import ErrorStackParser from 'error-stack-parser';
/**
 * Assertion error containing optional info about actual / expected value which
 * can be used by test runners like Mocha to pretty print.
 */
export class AssertionError extends Error {
    constructor(options) {
        const message = options.message;
        super(message);
        this.name = 'AssertionError';
        this.actual = options.actual;
        this.expected = options.expected;
        this.stack = `${this.message}\n${options.stack}`;
    }
    static getLocation(name) {
        var _a;
        const error = new Error('message');
        const cleaned = getCleanStack(error);
        const parsed = ErrorStackParser.parse({ stack: cleaned });
        return {
            file: (_a = parsed[0]) === null || _a === void 0 ? void 0 : _a.fileName,
            stack: formatStack(name, parsed),
        };
    }
}
function getCleanStack(error) {
    var _a, _b, _c, _d, _e, _f;
    const lines = (_b = (_a = error.stack) === null || _a === void 0 ? void 0 : _a.split('\n')) !== null && _b !== void 0 ? _b : [];
    if ((_c = lines[0]) === null || _c === void 0 ? void 0 : _c.startsWith('Error: message')) {
        return lines.slice(5).join('\n');
    }
    if (((_d = lines[0]) === null || _d === void 0 ? void 0 : _d.includes('AssertionError')) && ((_e = lines[2]) === null || _e === void 0 ? void 0 : _e.includes('^'))) {
        // in esbuild-register context is added to the stack trace
        return lines.slice(9).join('\n');
    }
    return (_f = error.stack) !== null && _f !== void 0 ? _f : '';
}
function formatStack(name, stack) {
    return stack
        .map((frame, i) => {
        let file = frame.fileName;
        if (file !== undefined && frame.lineNumber !== undefined) {
            file += `:${frame.lineNumber}`;
            if (frame.columnNumber !== undefined) {
                file += `:${frame.columnNumber}`;
            }
        }
        if (i === 0) {
            return file === undefined
                ? `    at ${name}`
                : `    at ${name} (${file})`;
        }
        return frame.source;
    })
        .join('\n');
}
//# sourceMappingURL=AssertionError.js.map
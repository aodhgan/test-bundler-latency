import { isMockFn, mockFn } from './mockFn.js';
/**
 * Returns a mock object that can be used in place of a real object. This is
 * useful if the real object is hard to create or if it is hard to get it
 * exhibit some specific behavior.
 *
 * Functions on the mock object are also `mockFn`s, so they can be used in
 * validators that work for mocks.
 *
 * @param overrides - The members to be overridden.
 *
 * @example
 * ```ts
 * class Person {
 *   constructor(public name: string, public age: number) {}
 *
 *   isAdult() {
 *     return this.age >= 18
 *   }
 * }
 *
 * const mock = mockObject<Person>({
 *   isAdult: () => true,
 * })
 *
 * expect(mock.isAdult()).toEqual(true)
 * expect(mock.isAdult).toHaveBeenCalled()
 * ```
 */
export function mockObject(overrides = {}) {
    const clone = replaceFunctionsWithMocks(overrides);
    return new Proxy(clone, {
        get(target, property, receiver) {
            if (Reflect.has(target, property)) {
                return Reflect.get(target, property, receiver);
            }
            throw new TypeError(`Cannot access .${property.toString()} - no mock value provided.`);
        },
    });
}
function replaceFunctionsWithMocks(object) {
    const clone = { ...object };
    for (const key of Object.keys(clone)) {
        const value = clone[key];
        if (typeof value === 'function') {
            if (!isMockFn(value)) {
                clone[key] = mockFn(value);
            }
        }
    }
    return clone;
}
//# sourceMappingURL=mockObject.js.map
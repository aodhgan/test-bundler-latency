"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSnapshot = exports.resetSnapshotCache = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const format_js_1 = require("./format.js");
const counters = new Map();
const snapshots = new Map();
function resetSnapshotCache() {
    counters.clear();
    snapshots.clear();
}
exports.resetSnapshotCache = resetSnapshotCache;
function getSnapshot(controlFileName, context, mode) {
    var _a, _b, _c, _d;
    const filePath = (_b = (_a = context.test) === null || _a === void 0 ? void 0 : _a.file) !== null && _b !== void 0 ? _b : controlFileName;
    if (!filePath) {
        throw new TypeError('Invalid test context. Cannot determine test file path.');
    }
    const file = path_1.default.join(path_1.default.dirname(filePath), path_1.default.basename(filePath) + '.snapshot');
    const testName = getTestName(context);
    if (!testName) {
        throw new TypeError('Invalid test context. Cannot determine test name.');
    }
    const counter = (_c = counters.get(file)) !== null && _c !== void 0 ? _c : new Map();
    counters.set(file, counter);
    const count = (_d = counter.get(testName)) !== null && _d !== void 0 ? _d : 1;
    counter.set(testName, count + 1);
    const name = `${testName} ${count}`;
    let content = snapshots.get(file);
    if (!content || mode === 'all') {
        try {
            content = (0, format_js_1.parseSnapshot)((0, fs_1.readFileSync)(file, 'utf8'));
        }
        catch { }
    }
    content = content !== null && content !== void 0 ? content : {};
    snapshots.set(file, content);
    const expected = content[name];
    return {
        file,
        name,
        content,
        expected: typeof expected === 'string' ? expected : undefined,
    };
}
exports.getSnapshot = getSnapshot;
function getTestName(context) {
    var _a;
    const name = (_a = context.test) === null || _a === void 0 ? void 0 : _a.fullTitle();
    if (name) {
        return name;
    }
    if (context.__test__ !== undefined) {
        const parts = [context.__test__];
        if (context.__suite__) {
            parts.unshift(context.__suite__);
        }
        return parts.join(' ');
    }
}
//# sourceMappingURL=getSnapshot.js.map
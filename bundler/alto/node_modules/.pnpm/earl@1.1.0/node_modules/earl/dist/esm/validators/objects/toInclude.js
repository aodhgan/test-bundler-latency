import { registerValidator } from '../../expect.js';
import { formatCompact } from '../../format/index.js';
import { includes } from '../../matchers/objects/includes.js';
registerValidator('toInclude', toInclude);
export function toInclude(control, ...items) {
    const actualInline = formatCompact(control.actual);
    const itemsInline = formatItems(items);
    if (items.length === 0) {
        throw new TypeError('toInclude requires at least one argument');
    }
    control.assert({
        success: includes(...items)(control.actual),
        reason: `The value ${actualInline} does not include ${itemsInline}, but it was expected to.`,
        negatedReason: `The value ${actualInline} includes ${itemsInline}, but it was expected not to.`,
    });
}
function formatItems(items) {
    const joined = languageJoin(items.map((x) => formatCompact(x, 20)));
    return joined.length > 50 ? `all of: ${items.length} items` : joined;
}
function languageJoin(items) {
    if (items.length === 1) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return items[0];
    }
    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
    return `all of: ${items.slice(0, -1).join(', ')} and ${items.at(-1)}`;
}
//# sourceMappingURL=toInclude.js.map
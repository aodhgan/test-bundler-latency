"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processError = exports.captureAsyncError = exports.captureError = void 0;
const index_js_1 = require("../../format/index.js");
function captureError(fn) {
    let error;
    let result;
    let didThrow = false;
    try {
        result = fn();
    }
    catch (e) {
        didThrow = true;
        error = e;
    }
    return { didThrow, error, result };
}
exports.captureError = captureError;
async function captureAsyncError(fn) {
    let error;
    let result;
    let didThrow = false;
    try {
        result = await fn();
    }
    catch (e) {
        didThrow = true;
        error = e;
    }
    return { didThrow, error, result };
}
exports.captureAsyncError = captureAsyncError;
function processError(control, thrownError, sentenceStart, errorClassOrMessage, message) {
    const expectedClass = typeof errorClassOrMessage === 'function' ? errorClassOrMessage : undefined;
    const expectedMessage = typeof errorClassOrMessage === 'function' ? message : errorClassOrMessage;
    if (expectedClass === undefined && expectedMessage === undefined) {
        return control.assert({
            success: true,
            reason: '',
            negatedReason: `${sentenceStart} an error, but it was expected not to.`,
        });
    }
    const classMatches = isMatchingClass(thrownError, expectedClass);
    const messageMatches = isMatchingMessage(thrownError, expectedMessage);
    if (expectedClass === undefined && expectedMessage !== undefined) {
        const messageInline = (0, index_js_1.formatCompact)(expectedMessage);
        return control.assert({
            success: messageMatches,
            reason: `${sentenceStart} a message that did not match ${messageInline}, but it was expected to.`,
            negatedReason: `${sentenceStart} a message matching ${messageInline}, but it was expected not to.`,
            actual: getMessageProperty(thrownError),
            expected: expectedMessage,
        });
    }
    if (expectedClass !== undefined && expectedMessage === undefined) {
        const className = expectedClass.name;
        return control.assert({
            success: classMatches,
            reason: `${sentenceStart} an error that was not an instance of ${className}, but it was expected to be.`,
            negatedReason: `${sentenceStart} an instance of ${className}, but it was expected not to.`,
            actual: getConstructorName(thrownError),
            expected: className,
        });
    }
    if (expectedClass !== undefined && expectedMessage !== undefined) {
        const messageInline = (0, index_js_1.formatCompact)(expectedMessage);
        const className = expectedClass.name;
        return control.assert({
            success: classMatches && messageMatches,
            reason: `${sentenceStart} an error that was not an instance of ${className} with the message ${messageInline}, but it was expected to be.`,
            negatedReason: `${sentenceStart} an instance of ${className} with the message ${messageInline}, but it was expected not to.`,
            actual: (0, index_js_1.format)(thrownError, null),
            expected: formatExpected(thrownError, expectedClass, expectedMessage),
        });
    }
}
exports.processError = processError;
function isMatchingClass(thrownError, expected) {
    return !expected || thrownError instanceof expected;
}
function isMatchingMessage(thrownError, expected) {
    if (typeof expected === 'string') {
        const thrownMessage = getMessageProperty(thrownError);
        return typeof thrownMessage === 'string' && thrownMessage.includes(expected);
    }
    else if (expected instanceof RegExp) {
        const thrownMessage = getMessageProperty(thrownError);
        return typeof thrownMessage === 'string' && expected.test(thrownMessage);
    }
    else {
        return true;
    }
}
function formatExpected(thrownError, expectedClass, expectedMessage) {
    const thrownClassName = getConstructorName(thrownError);
    const thrownName = getNameProperty(thrownError);
    const className = expectedClass ? expectedClass.name : thrownClassName;
    const object = {};
    if (expectedMessage !== undefined) {
        object.message = expectedMessage;
    }
    if (thrownName !== undefined) {
        object.name = thrownName;
    }
    return `${className ? className + ' ' : ''}${(0, index_js_1.format)(object, null)}`;
}
function getMessageProperty(thrownError) {
    return typeof thrownError === 'object' && thrownError != null
        ? Reflect.get(thrownError, 'message')
        : undefined;
}
function getNameProperty(thrownError) {
    const name = typeof thrownError === 'object' &&
        thrownError != null &&
        Reflect.get(thrownError, 'name');
    if (typeof name === 'string') {
        return name;
    }
}
function getConstructorName(thrownError) {
    return typeof thrownError === 'object' &&
        thrownError != null &&
        thrownError.constructor !== Object
        ? thrownError.constructor.name
        : undefined;
}
//# sourceMappingURL=errors.js.map
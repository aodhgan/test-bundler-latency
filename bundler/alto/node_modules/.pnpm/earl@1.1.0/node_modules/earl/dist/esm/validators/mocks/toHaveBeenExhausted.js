import { registerValidator } from '../../expect.js';
import { assertIsMock } from './utils.js';
registerValidator('toHaveBeenExhausted', toHaveBeenExhausted);
export function toHaveBeenExhausted(control) {
    assertIsMock(control);
    const remainingCalls = control.actual.getOneTimeOverridesLength();
    const remainingOverrides = control.actual.getParameterOverridesLength();
    let remaining = '';
    if (remainingCalls !== 0 && remainingOverrides === 0) {
        remaining = `${remainingCalls} calls remaining`;
    }
    else if (remainingCalls === 0 && remainingOverrides !== 0) {
        remaining = `${remainingOverrides} conditional calls remaining`;
    }
    else {
        remaining = `${remainingCalls} calls and ${remainingOverrides} conditional calls remaining`;
    }
    control.assert({
        success: control.actual.isExhausted(),
        reason: `The mock function was not exhausted, ${remaining}.`,
        negatedReason: `The mock function has been exhausted, but it was not expected to be.`,
    });
}
//# sourceMappingURL=toHaveBeenExhausted.js.map
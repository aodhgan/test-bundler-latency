import { registerValidator } from '../../expect.js';
import { formatCompact } from '../../format/index.js';
import { captureError, processError } from './errors.js';
registerValidator('toThrow', toThrow);
export function toThrow(control, errorClassOrMessage, message) {
    if (typeof control.actual !== 'function') {
        const actualInline = formatCompact(control.actual);
        return control.fail({
            reason: `The value ${actualInline} is not a function, but it was expected to be a function.`,
        });
    }
    const fn = control.actual;
    const { didThrow, error, result } = captureError(() => fn());
    if (result instanceof Promise) {
        const replacement = errorClassOrMessage !== undefined ? 'toBeRejectedWith' : 'toBeRejected';
        return control.fail({
            reason: `The function call returned a promise. To make this assertion work with async functions replace toThrow with ${replacement} and add await.`,
        });
    }
    if (!didThrow) {
        return control.assert({
            success: false,
            reason: 'The function call did not throw an error, but it was expected to.',
            negatedReason: '',
        });
    }
    processError(control, error, 'The function call threw', errorClassOrMessage, message);
}
//# sourceMappingURL=toThrow.js.map
import type { Address, Chain, Client, Hex, Narrow, Transport } from "viem";
import { type PaymasterActions, type SmartAccount, type UserOperationCalls } from "viem/account-abstraction";
import { type EncodeInstallModuleParameters } from "../../utils/encodeInstallModule.js";
export type InstallModulesParameters<TSmartAccount extends SmartAccount | undefined, calls extends readonly unknown[]> = EncodeInstallModuleParameters<TSmartAccount> & {
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
    nonce?: bigint;
    calls?: UserOperationCalls<Narrow<calls>>;
    paymaster?: Address | true | {
        /** Retrieves paymaster-related User Operation properties to be used for sending the User Operation. */
        getPaymasterData?: PaymasterActions["getPaymasterData"] | undefined;
        /** Retrieves paymaster-related User Operation properties to be used for gas estimation. */
        getPaymasterStubData?: PaymasterActions["getPaymasterStubData"] | undefined;
    } | undefined;
    /** Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls. */
    paymasterContext?: unknown | undefined;
};
export declare function installModules<TSmartAccount extends SmartAccount | undefined, calls extends readonly unknown[]>(client: Client<Transport, Chain | undefined, TSmartAccount>, parameters: InstallModulesParameters<TSmartAccount, calls>): Promise<Hex>;
//# sourceMappingURL=installModules.d.ts.map